# 什么是线程

    # 能够呗操作系统调度的最小单位
    # 同一个进程中的多个线程同时被CPU执行
    # 数据共享，操作系统调度的最小单位，可以利用多核 操作系统调度，数据不安全，开关切换时间开销小

# 在CPython中的多线程
    # gc  垃圾回收机制
        # 通过 引用计数 + 分代回收
        # GIL(gloval interpreter lock)全局解释器锁的出现 主要是为了完成gc的垃圾回收机制，对不同线程的引用计数的变化记录更加的精准
            # 导致同一个进程中的多个线程 只能有一个线程真正被cpu执行 是一种伪 并行

    #线程之间的全局数据是共享的
    # 进程之间想要数据共享需要用Manager()